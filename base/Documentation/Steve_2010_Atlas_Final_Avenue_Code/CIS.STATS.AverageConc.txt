'==========================================================
'Script Name: CIS.STATS.AverageConc
'
'Purpose: Computes an average Ct product. This is more 
'         complex than a straightforward local statistic
'         average because we need to skip any no data 
'         areas.
'
'         It works by computing the total possible number
'         of obs by skipping no data values and thereby
'         generating a "real" average based on observations
'         only. Similar to our frequency computations.
'
'         Assumes all input data are LCC100 projection.
'
'Files Required: none
'
'Scripts Required: CIS.ALL.ClipClimateGrid
'
'Global Variables: _cisRefDir
'
'Original Author: Steve McCourt (CIS)
'
'Original Script Date: 01-JUN-2010
'
'Objects Received: the LIST object ftabsrcnameList
'                  the NUMBER object outcellSize
'                  the STRING object theRegion
'                  the SRCNAME object outFileName
'
'Objects Returned: None
'                                       
'Modifications/Date/Author: 
'==========================================================

ftabsrcnameList = Self.Get(0)
outcellSize = Self.Get(1)
theRegion = (Self.Get(2)).LCase
outFileName = Self.Get(3)

if(outFileName.Is(String)) then
  outFileName = outFileName.AsFileName
elseif(outFileName.Is(SrcName)) then
  outFileName = outFileName.AsString.AsFileName
end

Grid.SetAnalysisCellSize(#GRID_ENVTYPE_VALUE, outcellSize)

'==========================================================
'now set the analysis extent for our grids
'==========================================================

bndSrcName = SrcName.Make(_cisRefDir+"\shapefiles\bnds\"+theRegion+
  "_atlas_lcc100"+".shp")  

'==========================================================
'just in case there is more than one shape in the bnd,
'union all the shapes
'==========================================================

bndFTab = FTab.Make(bndSrcName)
bndshpFld = bndFTab.FindField("Shape")

totShp = bndFTab.ReturnValue(bndshpFld, 0)

if(bndFTab.GetNumRecords > 1) then
  for each rec in 1..(bndFTab.GetNumRecords - 1)
    shp = bndFTab.ReturnValue(bndshpFld, rec)
    totShp = totShp.ReturnUnion(shp)
  end
end

bndFTab.Deactivate
bndFTab = nil

totshpExtent = totShp.ReturnExtent
llx = (((totshpExtent.GetLeft) / outcellSize).Round) * outcellSize
lly = (((totshpExtent.GetBottom) / outcellSize).Round) * outcellSize
urx = (((totshpExtent.GetRight) / outcellSize).Round) * outcellSize
ury = (((totshpExtent.GetTop) / outcellSize).Round) * outcellsize

Grid.SetAnalysisExtent(#GRID_ENVTYPE_VALUE, Rect.MakeXY(llx,lly,urx,ury))


ftabList = {}

for each asrcname in ftabsrcnameList
  theFTab = FTab.Make(asrcname)
  ftabList.Add(theFTab)
  theFTab.Deactivate
end  

av.PurgeObjects

'==========================================================
'we need our pre-defined bnds to ensure a consistent
'AOI, so define it now
'==========================================================

lcc100bndSrcName = SrcName.Make(_cisRefDir+"\shapefiles\bnds\"+theRegion+
  "_atlas_lcc100.shp")
lcc100bndFTab = FTab.Make(lcc100bndSrcName)

firstTime = True

for each theftab in ftabList

  '========================================================
  'add a temporary field for our frequency now called 
  '"CONC", with values from 0 to 100, 123 is nodata
  '========================================================

  newFld = theftab.FindField("Conc")
  if(newFld = nil) then
    newFld = Field.Make("Conc", #FIELD_DECIMAL, 3, 0)
    theftab.SetEditable(True)
    theftab.AddFields({newFld})
    newFld = theftab.FindField("Conc")
    nctFld = theftab.FindField("N_ct")
    pnttypeFld = theftab.FindField("Pnt_type")
    for each rec in theftab
      '====================================================         
      'we want conc values between 0 and 100
      '====================================================     
      nctVal = (theftab.ReturnValue(nctFld, rec)).Trim      
      pnttypeVal = theftab.ReturnValue(pnttypeFld, rec)
      if(nctVal.IsNull) then
        nctVal = 0
      else
        nctVal = (nctVal.AsNumber.SetFormat("d.d") * 10).SetFormat("d")
      end   
      
      '====================================================         
      'ensure NoData is 123 and OW, BW, IF are 0
      '====================================================          
      if((pnttypeVal = 123) or (pnttypeVal = 128) or 
         (pnttypeVal = 133) or (pnttypeVal = 143) or
         (pnttypeVal = 147)) then
        theftab.SetValue(newFld, rec, 123)
      elseif((pnttypeVal = 101) or (pnttypeVal = 107) or
             (pnttypeVal = 115)) then
        theftab.SetValue(newFld, rec, 0)
      else
        theftab.SetValue(newFld, rec, nctVal)        
      end
    end
    theftab.SetEditable(False)
  end

  '========================================================      
  'since regional extents vary over time, we expand the
  'analysis extent by 200km (200,000m) to capture all
  'input data and get rid of any no data issues that
  'negate any processing within them
  '========================================================      
  
  gridExtent = ((FTheme.Make(theftab)).ReturnExtent).ExpandBy(200000)

  '========================================================      
  'now ensure that all grid origins begin at a multiple
  'of the cellsize, otherwise, cells can be misaligned
  '========================================================      
  
  llx = gridExtent.GetLeft
  lly = gridExtent.GetBottom
  
  llx = ((llx / outcellSize).Floor) * outcellSize
  lly = ((lly / outcellSize).Floor) * outcellSize
  
  gridExtent.SetOrigin(llx@lly)  
  gridParams = {outcellSize, gridExtent}   
  
  g1 = Grid.MakeFromFTab(theftab, Prj.MakeNull, newFld, 
        gridParams)
        
  '========================================================      
  'NOTE: all buildSTA and purgeObjects requests are
  'done to ensure memory is cleaned up and temp grids
  'are written to disk instead of in memory
  '========================================================         
  
  g1.BuildSTA
        
  '========================================================      
  'avoid altering the input ftabs (remove the new fields)
  '========================================================      
         
  theftab.SetEditable(True)
  theftab.RemoveFields({newfld})
  theftab.SetEditable(False)
  
  '========================================================      
  'for the east coast, we need to add a zero layer because
  'if the extent isn't full (1968/69 to 1997/98) then ice
  'beyond the extent will be forced to nodata this is
  'different than the nodata patch below because we know 
  'everything beyond the chart extent is no ice
  '========================================================      

  if(theRegion = "ec") then
    bndSrcName = SrcName.Make(_cisRefDir+"\shapefiles\bnds\ec_atlas_lcc100.shp")
    bndFTab = FTab.Make(bndSrcName)
    tmpFld = bndFTab.FindField("Tmp")
    if(tmpFld = nil) then        
      tmpFld = Field.Make("Tmp", #FIELD_DECIMAL, 1, 0)
      bndFTab.SetEditable(True)      
      bndFTab.AddFields({tmpFld})
      saveEdits = True
      bndFTab.SetEditable(False)
      tmpFld = bndFTab.FindField("Tmp")
    end      
   
    '======================================================      
    'again, ensure constant grid extents/origins
    '======================================================      
    
    gridExtent = ((FTheme.Make(bndFTab)).ReturnExtent).ExpandBy(200000)
    
    llx = gridExtent.GetLeft
    lly = gridExtent.GetBottom
    
    llx = ((llx / outcellSize).Floor) * outcellSize
    lly = ((lly / outcellSize).Floor) * outcellSize
    
    gridExtent.SetOrigin(llx@lly)  
    gridParams = {outcellSize, gridExtent} 
    zerogrid = Grid.MakeFromFTab(bndFTab, Prj.MakeNull, tmpFld,
      gridParams)
    g2 = g1.Merge({zerogrid})
    bndFTab.SetEditable(True)
    bndFTab.RemoveFields({tmpFld})
    saveEdits = True
    bndFTab.SetEditable(False)
    bndFTab.Deactivate
    g1 = nil
    g1 = g2
    g1.BuildSTA
    av.PurgeObjects
  end  

  '========================================================      
  'now we need to be careful because charts can have no 
  'data holes in them (Arctic for example), so to alleviate 
  'this we will merge the entire grid with a 123 layer - 
  'this also fixes the the no processing in nodata areas and 
  'allows us to have real frequencies based on the number 
  'of real observations
  '
  'no data is 123, ice is 1, no ice is 0
  '========================================================      
  
  g2 = (g1.IsNull).Con(123.AsGrid, g1)  
  g2.BuildSTA      
    
  '========================================================      
  'initialize concGrid and totpossibleGrid
  '======================================================== 
  if(firstTime) then       
    zeroGrid = g2 * 0.AsGrid
    zeroGrid.BuildSTA
    concGrid = zeroGrid
    totpossibleGrid = zeroGrid
    totpossibleGrid.BuildSTA
    firstTime = False
  end
  
  totpossibleGrid = totpossibleGrid + (g2 <> 123.AsGrid)
  totpossibleGrid.BuildSTA

  '========================================================  
  'now put the 123 (no data areas) back to 0 for easy 
  'computation - we have accounted for no data in the 
  'totpossibleGrid
  '========================================================  
  concGrid = concGrid + (g2 = 123.AsGrid).Con(0.AsGrid, g2)
  concGrid.BuildSTA
  
  g1 = nil
  g2 = nil
  theftab.Deactivate
  av.PurgeObjects
end

'==========================================================      
'now calculate the average
'==========================================================      
  
g3 = (concGrid.Float) / (totpossibleGrid.Float)
g3.BuildSTA

'==========================================================      
'now convert to an integer grid, remembering that the .INT
'function truncates and does not round which works well here
'==========================================================      

g4 = g3.Int
g4.BuildSTA
'==========================================================
'now put values back to between 0 and 11 (remember that
'we stupidly code 9+ as 10 (100 before dividing by 10), and 
'10 as 11 (110 before dividing by 10)
'==========================================================


g5 = (g4 = 100.AsGrid).Con(110.AsGrid, g4)
g5.BuildSTA

g6 = ((g5 >= 97.AsGrid) and (g5 < 100.AsGrid)).Con(100.AsGrid, g5)
g6.BuildSTA

g7 = (g6 / 10).Int
g7.BuildSTA

'==========================================================
'finally clip the grid to it's pre-defined extent
'==========================================================

outcentmer = -100
tmpFileName = outFileName.ReturnDir

g7FileName = (tmpFileName.AsString+"\g7").AsFileName
g7.SaveDataSet(g7FileName)
g8FileName = (tmpFileName.AsString+"\g8").AsFileName

doISIS = False

av.Run("CIS.ALL.ClipClimateGrid", {theRegion, 
  g7FileName.AsString, outcentMer, g8FileName, doISIS})
  
g8 = Grid.Make(Grid.MakeSrcName(g8FileName.AsString))

avgGrid = g8.Int
avgGrid.BuildSTA
avgGrid.SaveDataSet(outFileName)

'==========================================================
'now cleanup
'==========================================================

avgGrid = nil
g3 = nil
g4 = nil
g5 = nil
g6 = nil
g7 = nil
g8 = nil
avgGrid = nil

av.PurgeObjects

Grid.DeleteDataSet(g7FileName)
Grid.DeleteDataSet(g8FileName)


